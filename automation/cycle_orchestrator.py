# automation/cycle_orchestrator.py
# Orquestrador do ciclo completo: Todoist ‚Üí Servopa ‚Üí Todoist (checkbox) ‚Üí repetir

import time
from selenium.webdriver.common.by import By

def switch_to_window_with_url(driver, url_part, progress_callback=None):
    """
    Muda para a janela/aba que cont√©m a URL especificada
    
    Args:
        driver: Inst√¢ncia do WebDriver
        url_part: Parte da URL para identificar a janela (ex: "todoist", "servopa")
        progress_callback: Fun√ß√£o para atualizar progresso na UI
        
    Returns:
        bool: True se encontrou e mudou com sucesso
    """
    try:
        for handle in driver.window_handles:
            driver.switch_to.window(handle)
            if url_part in driver.current_url:
                if progress_callback:
                    progress_callback(f"üîÑ Mudado para aba: {url_part}")
                return True
        
        if progress_callback:
            progress_callback(f"‚ùå Aba com '{url_part}' n√£o encontrada")
        return False
        
    except Exception as e:
        if progress_callback:
            progress_callback(f"‚ùå Erro ao mudar de aba: {e}")
        return False


def executar_ciclo_completo(driver, board_data, progress_callback=None, history_callback=None, should_continue=None):
    """
    Executa o ciclo completo coluna por coluna, linha por linha
    
    Fluxo:
    1. Para cada coluna (se√ß√£o/grupo) no board:
       2. Para cada linha (tarefa/cota) naquela coluna:
          a. Muda para aba do Servopa
          b. Busca grupo
          c. Seleciona cota
          d. Navega para lances
          e. Executa lance (com verifica√ß√£o de popup)
          f. Muda para aba do Todoist
          g. Marca checkbox como conclu√≠do (individual)
          h. Volta para aba do Servopa
          i. Registra no hist√≥rico
       3. Ao terminar a coluna: marca TODOS os checkboxes da coluna
       4. Pr√≥xima coluna
    
    Args:
        driver: Inst√¢ncia do WebDriver com ambas as abas abertas
        board_data: Dados extra√≠dos do board (retorno de extract_complete_board)
        progress_callback: Fun√ß√£o para atualizar progresso na UI
        history_callback: Fun√ß√£o para adicionar entrada ao hist√≥rico (grupo, cota, nome, valor, status, obs)
        should_continue: Fun√ß√£o que retorna True se deve continuar, False se deve parar
        
    Returns:
        dict: Estat√≠sticas da execu√ß√£o
    """
    from automation.servopa_lances import processar_lance_completo
    from utils.todoist_board_extractor import mark_task_completed, mark_all_section_tasks_completed
    
    stats = {
        'total_sections': len(board_data['sections']),
        'total_tasks': sum(len(s['tasks']) for s in board_data['sections']),
        'completed': 0,
        'failed': 0,
        'skipped': 0,
        'results': []
    }
    
    if progress_callback:
        progress_callback("=" * 60)
        progress_callback(f"üöÄ INICIANDO CICLO COMPLETO")
        progress_callback(f"üìä {stats['total_sections']} colunas, {stats['total_tasks']} tarefas")
        progress_callback("=" * 60)
    
    # Percorre cada coluna (se√ß√£o)
    for section_index, section in enumerate(board_data['sections'], 1):
        # Verifica se deve continuar
        if should_continue and not should_continue():
            if progress_callback:
                progress_callback("‚èπÔ∏è Automa√ß√£o interrompida pelo usu√°rio")
            return stats
        
        grupo = section['grupo']
        section_title = section['title']
        total_tasks_in_section = len(section['tasks'])
        
        # NOVO: Verifica se TODAS as tarefas da coluna est√£o flegadas
        pending_tasks = [t for t in section['tasks'] if not t.get('is_completed', False)]
        completed_tasks = [t for t in section['tasks'] if t.get('is_completed', False)]
        
        if progress_callback:
            progress_callback("")
            progress_callback("‚îå" + "‚îÄ" * 58 + "‚îê")
            progress_callback(f"‚îÇ COLUNA {section_index}/{stats['total_sections']}: {section_title:<48}‚îÇ")
            progress_callback(f"‚îÇ Grupo: {grupo:<51}‚îÇ")
            progress_callback(f"‚îÇ Total: {total_tasks_in_section}  |  ‚úÖ Flegadas: {len(completed_tasks)}  |  ‚¨ú Pendentes: {len(pending_tasks):<15}‚îÇ")
            progress_callback("‚îî" + "‚îÄ" * 58 + "‚îò")
        
        # Se TODAS as tarefas est√£o flegadas, pula a coluna inteira
        if len(pending_tasks) == 0:
            if progress_callback:
                progress_callback(f"‚úÖ Coluna '{section_title}' totalmente flegada - PULANDO para pr√≥xima coluna")
            stats['skipped'] += len(completed_tasks)
            continue
        
        # Percorre APENAS as tarefas PENDENTES (n√£o flegadas)
        for task_index, task in enumerate(pending_tasks, 1):
            # Verifica se deve continuar
            if should_continue and not should_continue():
                if progress_callback:
                    progress_callback("‚èπÔ∏è Automa√ß√£o interrompida pelo usu√°rio")
                return stats
            
            cota = task['cota']
            nome = task['nome']
            checkbox = task['checkbox_element']
            
            if progress_callback:
                progress_callback("")
                progress_callback(f"‚îå‚îÄ Tarefa {task_index}/{len(pending_tasks)} (Pendente) " + "‚îÄ" * 30)
                progress_callback(f"‚îÇ  üìù Cota: {cota}")
                progress_callback(f"‚îÇ  üë§ Nome: {nome}")
                progress_callback(f"‚îî" + "‚îÄ" * 50)
            
            result = {
                'section': section_title,
                'grupo': grupo,
                'cota': cota,
                'nome': nome,
                'success': False,
                'error': None
            }
            
            try:
                # ========== VERIFICA√á√ÉO: CONTINUAR? ==========
                if should_continue and not should_continue():
                    # Automa√ß√£o foi parada pelo usu√°rio DURANTE o processamento deste item
                    if history_callback:
                        try:
                            history_callback(
                                grupo,
                                cota,
                                nome,
                                "N/A",
                                "‚èπÔ∏è Parado",
                                "Automa√ß√£o interrompida pelo usu√°rio",
                            )
                        except:
                            pass
                    if progress_callback:
                        progress_callback("‚èπÔ∏è Automa√ß√£o interrompida pelo usu√°rio durante processamento")
                    return stats
                
                # ========== PARTE 1: SERVOPA ==========
                if progress_callback:
                    progress_callback("üåê [SERVOPA] Mudando para aba do Servopa...")
                
                if not switch_to_window_with_url(driver, "servopa", progress_callback):
                    raise Exception("N√£o foi poss√≠vel mudar para aba do Servopa")
                
                time.sleep(1)
                
                # ========== VERIFICA√á√ÉO: CONTINUAR? ==========
                if should_continue and not should_continue():
                    if history_callback:
                        try:
                            history_callback(grupo, cota, nome, "N/A", "‚èπÔ∏è Parado", "Automa√ß√£o interrompida pelo usu√°rio")
                        except:
                            pass
                    if progress_callback:
                        progress_callback("‚èπÔ∏è Automa√ß√£o interrompida pelo usu√°rio durante processamento")
                    return stats
                
                # Processa lance completo no Servopa
                if progress_callback:
                    progress_callback(f"üéØ [SERVOPA] Processando lance: Grupo {grupo} - Cota {cota}")
                
                lance_result = processar_lance_completo(driver, grupo, cota, progress_callback)
                
                if not lance_result['success']:
                    raise Exception(f"Falha no processamento do lance: {lance_result.get('error', 'Desconhecido')}")
                
                # Verifica se lance j√° existia
                if lance_result.get('already_exists', False):
                    if progress_callback:
                        progress_callback(f"‚úÖ [SERVOPA] {lance_result.get('lance_message', 'Lance j√° registrado')}")
                else:
                    if progress_callback:
                        progress_callback(f"‚úÖ [SERVOPA] Lance registrado com sucesso!")
                
                # ========== VERIFICA√á√ÉO: CONTINUAR? ==========
                if should_continue and not should_continue():
                    if history_callback:
                        try:
                            history_callback(grupo, cota, nome, "N/A", "‚èπÔ∏è Parado", "Automa√ß√£o interrompida pelo usu√°rio")
                        except:
                            pass
                    if progress_callback:
                        progress_callback("‚èπÔ∏è Automa√ß√£o interrompida pelo usu√°rio durante processamento")
                    return stats
                
                # ========== PARTE 2: TODOIST ==========
                if progress_callback:
                    progress_callback("üìã [TODOIST] Mudando para aba do Todoist...")
                
                if not switch_to_window_with_url(driver, "todoist", progress_callback):
                    raise Exception("N√£o foi poss√≠vel mudar para aba do Todoist")
                
                time.sleep(1)
                
                # Marca tarefa como conclu√≠da
                if progress_callback:
                    progress_callback(f"‚úÖ [TODOIST] Marcando tarefa como conclu√≠da...")
                
                if mark_task_completed(driver, checkbox, progress_callback):
                    if progress_callback:
                        progress_callback(f"‚úÖ [TODOIST] Tarefa marcada com sucesso!")
                    
                    result['success'] = True
                    result['protocol_number'] = lance_result.get('protocol_number')
                    result['docparser_url'] = lance_result.get('docparser_url')
                    stats['completed'] += 1
                    
                    # ========== REGISTRA NO HIST√ìRICO (SUCESSO) ==========
                    if history_callback:
                        try:
                            valor_lance = lance_result.get('valor_lance', 'N/A')
                            
                            # DEBUG: Log do valor capturado
                            if progress_callback:
                                progress_callback(f"üîç DEBUG - Valor capturado: '{valor_lance}'")
                                progress_callback(f"üîç DEBUG CYCLE: lance_result.get('protocol_number') = {lance_result.get('protocol_number')}")
                                progress_callback(f"üîç DEBUG CYCLE: lance_result.get('docparser_url') = {lance_result.get('docparser_url')}")
                                progress_callback(f"üîç DEBUG CYCLE: result['protocol_number'] = {result['protocol_number']}")
                            
                            # Formata valor: s√≥ adiciona % se n√£o for N/A
                            if valor_lance and valor_lance != 'N/A' and valor_lance.strip() != '':
                                valor_formatado = f"{valor_lance}%"
                            else:
                                valor_formatado = "N/A"
                            
                            if progress_callback:
                                progress_callback(f"üîç DEBUG - Valor formatado: '{valor_formatado}'")
                            
                            if lance_result.get('already_exists', False):
                                observacao = "Lance j√° existia (protocolo anterior detectado)"
                                status = "‚úÖ Sucesso (j√° existia)"
                            else:
                                observacao = "Lance registrado com sucesso"
                                status = "‚úÖ Sucesso"
                            
                            if progress_callback:
                                progress_callback(f"üîç DEBUG CYCLE: Chamando history_callback com protocolo={lance_result.get('protocol_number')}")
                            
                            history_callback(
                                grupo,
                                cota,
                                nome,
                                valor_formatado,
                                status,
                                observacao,
                                protocolo=lance_result.get('protocol_number'),
                                documento_url=lance_result.get('docparser_url'),
                            )
                            
                            if progress_callback:
                                progress_callback(f"‚úÖ DEBUG CYCLE: history_callback executado com sucesso!")
                                
                        except Exception as hist_error:
                            if progress_callback:
                                progress_callback(f"‚ö†Ô∏è Aviso: N√£o foi poss√≠vel registrar no hist√≥rico: {hist_error}")
                else:
                    raise Exception("Falha ao marcar checkbox no Todoist")
                
                # ========== RETORNA PARA SERVOPA ==========
                if progress_callback:
                    progress_callback("üîÑ Retornando para aba do Servopa para pr√≥xima tarefa...")
                
                switch_to_window_with_url(driver, "servopa", progress_callback)
                time.sleep(1)
                
                if progress_callback:
                    progress_callback(f"üéâ Tarefa {task_index}/{total_tasks_in_section} conclu√≠da com sucesso!")
                    progress_callback(f"üìä Progresso: {stats['completed']}/{stats['total_tasks']} tarefas")
                
            except Exception as e:
                stats['failed'] += 1
                result['error'] = str(e)
                
                # ========== REGISTRA NO HIST√ìRICO (ERRO) ==========
                # IMPORTANTE: N√ÉO registra no hist√≥rico se foi parado manualmente
                if history_callback:
                    # Verifica se foi parado pelo usu√°rio
                    if should_continue and not should_continue():
                        if progress_callback:
                            progress_callback(f"‚èπÔ∏è Tarefa {task_index} n√£o foi conclu√≠da devido √† parada manual - N√ÉO ser√° registrado no hist√≥rico")
                        # N√ÉO chama history_callback se foi parado manualmente
                    else:
                        # Se foi erro real (n√£o parada manual), registra no hist√≥rico
                        try:
                            history_callback(grupo, cota, nome, "N/A", "‚ùå Erro", str(e)[:200])
                        except Exception as hist_error:
                            if progress_callback:
                                progress_callback(f"‚ö†Ô∏è Aviso: N√£o foi poss√≠vel registrar erro no hist√≥rico: {hist_error}")
                
                if progress_callback:
                    progress_callback(f"‚ùå Erro na tarefa {task_index}: {e}")
                    progress_callback(f"‚ö†Ô∏è Tentando continuar com pr√≥xima tarefa...")
                
                # Tenta voltar para Servopa mesmo ap√≥s erro
                try:
                    switch_to_window_with_url(driver, "servopa", progress_callback)
                except:
                    pass
            
            stats['results'].append(result)
        
        # ========== FIM DA COLUNA: MARCA TODOS OS CHECKBOXES ==========
        if progress_callback:
            progress_callback("")
            progress_callback("=" * 60)
            progress_callback(f"üìã FINALIZANDO COLUNA: {section_title}")
            progress_callback("=" * 60)
        
        # Muda para Todoist para marcar todos os checkboxes
        try:
            if switch_to_window_with_url(driver, "todoist", progress_callback):
                time.sleep(2)
                
                # Marca todos os checkboxes da coluna
                marked_count = mark_all_section_tasks_completed(driver, section_title, progress_callback)
                
                if progress_callback:
                    progress_callback(f"‚úÖ {marked_count} checkboxes garantidos na coluna '{section_title}'")
            
            # Volta para Servopa para pr√≥xima coluna
            switch_to_window_with_url(driver, "servopa", progress_callback)
            time.sleep(1)
            
        except Exception as final_mark_error:
            if progress_callback:
                progress_callback(f"‚ö†Ô∏è Erro ao marcar checkboxes finais: {final_mark_error}")
        
        # Fim da coluna
        if progress_callback:
            progress_callback("")
            progress_callback(f"‚úÖ Coluna '{section_title}' TOTALMENTE conclu√≠da!")
            progress_callback(f"üìä Total: {stats['completed']} sucesso, {stats['failed']} falhas")
    
    # ========== RELAT√ìRIO FINAL ==========
    if progress_callback:
        progress_callback("")
        progress_callback("=" * 60)
        progress_callback("üéâ CICLO COMPLETO FINALIZADO!")
        progress_callback("=" * 60)
        if stats['skipped'] > 0:
            progress_callback(f"‚è≠Ô∏è Tarefas puladas (continua√ß√£o): {stats['skipped']}")
        progress_callback(f"‚úÖ Tarefas conclu√≠das: {stats['completed']}/{stats['total_tasks']}")
        progress_callback(f"‚ùå Tarefas com falha: {stats['failed']}/{stats['total_tasks']}")
        if stats['completed'] + stats['failed'] > 0:
            progress_callback(f"üìä Taxa de sucesso: {(stats['completed']/(stats['completed']+stats['failed'])*100):.1f}%")
        progress_callback("=" * 60)
    
    return stats


def executar_automacao_completa(driver, progress_callback=None):
    """
    Executa a automa√ß√£o completa do in√≠cio ao fim
    
    Requisitos:
    - Driver deve ter 2 abas abertas: Servopa e Todoist
    - Ambas devem estar logadas
    - Todoist deve estar no projeto do board
    
    Args:
        driver: Inst√¢ncia do WebDriver
        progress_callback: Fun√ß√£o para atualizar progresso na UI
        
    Returns:
        dict: Estat√≠sticas da execu√ß√£o
    """
    from utils.todoist_board_extractor import extract_complete_board
    
    try:
        # Verifica se h√° 2 abas abertas
        if len(driver.window_handles) < 2:
            if progress_callback:
                progress_callback("‚ùå Erro: S√£o necess√°rias 2 abas abertas (Servopa e Todoist)")
            return None
        
        if progress_callback:
            progress_callback("‚úÖ Verificado: 2 abas abertas")
        
        # Muda para aba do Todoist para extrair board
        if progress_callback:
            progress_callback("üìã Mudando para aba do Todoist para extrair dados...")
        
        if not switch_to_window_with_url(driver, "todoist", progress_callback):
            raise Exception("N√£o foi poss√≠vel encontrar aba do Todoist")
        
        time.sleep(2)
        
        # Extrai estrutura completa do board
        board_data = extract_complete_board(driver, progress_callback)
        
        if not board_data or not board_data['sections']:
            raise Exception("Falha ao extrair dados do board ou board vazio")
        
        # Executa ciclo completo
        stats = executar_ciclo_completo(driver, board_data, progress_callback)
        
        return stats
        
    except Exception as e:
        if progress_callback:
            progress_callback(f"‚ùå Erro na automa√ß√£o completa: {e}")
        return None


if __name__ == "__main__":
    # Teste do m√≥dulo
    print("Este m√≥dulo deve ser importado e usado com uma inst√¢ncia do WebDriver")
    print("Exemplo:")
    print("  from auth.servopa_auth import create_driver, login_servopa")
    print("  from auth.todoist_auth import login_todoist_and_extract")
    print("  from automation.cycle_orchestrator import executar_automacao_completa")
    print("  ")
    print("  driver = create_driver()")
    print("  login_servopa(driver)")
    print("  # Abrir Todoist em nova aba e fazer login...")
    print("  stats = executar_automacao_completa(driver)")
